# -*- coding: utf-8 -*-
"""Final_Sprints Modelipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19EtxYIpYxMDfCj3NBxU513Fb6Xn3CElI
"""

!pip install kagglehub
!pip install joblib

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import kagglehub
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.cluster import KMeans
from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve
import joblib

"""#**Download data set**


"""

path = kagglehub.dataset_download("fedesoriano/heart-failure-prediction")
csv_file_path = os.path.join(path, 'heart.csv')

# Read into DataFrame
df = pd.read_csv(csv_file_path)
print("DataFrame columns:", df.columns.tolist())
df.head()

"""#**Data preproccesing**"""

if 'HeartDisease' in df.columns:
    df.rename(columns={'HeartDisease': 'target'}, inplace=True)

# Encoding
categorical_cols = df.select_dtypes(include=['object']).columns
for col in categorical_cols:
    df[col] = pd.factorize(df[col])[0]

# Spliting
X = df.drop('target', axis=1)
y = df['target']

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train/Test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

"""#**PCA**"""

pca = PCA(n_components=0.95)
X_pca = pca.fit_transform(X_scaled)

# Plot variance
plt.figure()
plt.plot(np.cumsum(pca.explained_variance_ratio_))
plt.xlabel('Number of Components')
plt.ylabel('Cumulative Explained Variance')
plt.title('PCA - Variance Explained')
plt.grid(True)
plt.show()

"""#**Feature selection**"""

model_rfe = RandomForestClassifier()
rfe = RFE(model_rfe, n_features_to_select=10)
X_train_selected = rfe.fit_transform(X_train, y_train)
X_test_selected = rfe.transform(X_test)

"""#**train model**"""

models = {
    "Logistic Regression": LogisticRegression(),
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(),
    "SVM": SVC(probability=True)
}

for name, model in models.items():
    model.fit(X_train_selected, y_train)
    y_pred = model.predict(X_test_selected)
    print(f"\n{name}:\n")
    print(classification_report(y_test, y_pred))
    print("AUC Score:", roc_auc_score(y_test, model.predict_proba(X_test_selected)[:, 1]))

"""#**Evaluate the model**"""

y_pred = model.predict(X_test_selected)
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("AUC Score:", roc_auc_score(y_test, model.predict_proba(X_test_selected)[:, 1]))

# ROC Curve
fpr, tpr, _ = roc_curve(y_test, model.predict_proba(X_test_selected)[:, 1])
plt.plot(fpr, tpr, label="ROC Curve")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.show()

"""#**Hyper tunnig**"""

param_grid = {'n_estimators': [50, 100, 150]}
grid = GridSearchCV(RandomForestClassifier(), param_grid, cv=5)
grid.fit(X_train_selected, y_train)
print("Best Parameters:", grid.best_params_)

"""#**Clustring Process**"""

kmeans = KMeans(n_clusters=2)
clusters = kmeans.fit_predict(X_scaled)

# Hierarchical Dendrogram
linked = linkage(X_scaled, 'ward')
plt.figure(figsize=(10, 5))
dendrogram(linked)
plt.title("Hierarchical Clustering Dendrogram")
plt.show()

"""#**Saving the model**"""

os.makedirs("models", exist_ok=True)
joblib.dump(scaler, 'models/scaler.pkl')
joblib.dump(grid.best_estimator_, 'models/final_model.pkl')